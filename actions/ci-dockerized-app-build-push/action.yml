name: 'CI - Build Docker image'
description: 'The action performs the login with role to an AWS account'
author: devops@zilliqa.com

inputs:
  file:
    description: 'The path to the Dockerfile. If not set, it uses the context path.'
    required: false
  context:
    description: 'The context to build the Dockerfile'
    required: false
  build-args:
    description: 'Arguments to build the image'
    required: false
  pull:
    description: 'Enable/disable image pull'
    required: false
    default: true
  push:
    description: 'Enable/disable image push'
    required: false
    default: true
  target:
    description: 'The target to build in the image'
    required: false
  tag:
    description: 'The tag of the image'
    required: true
  tag-length:
    description: 'The number of chars composing the tag from the short commit sha'
    required: false
    default: 7
  tag-latest:
    description: 'If true add the tag latest'
    required: false
  registry:
    description: 'Docker registry'
    required: true
  registry-username:
    description: 'The username to access the registry'
    required: false
  registry-password:
    description: 'The password to access the registry'
    required: false
  aws-region:
    description: 'The AWS region'
    required: false
  role-to-assume:
    description: 'The AWS role to assume to login to the registry'
    required: false
  oidc-role:
    description: 'The AWS role trusting the OIDC'
    required: false
  workload-identity-provider:
    description: 'The GCP workload identity provider to login to the registry'
    required: false
  service-account:
    description: 'The GCP service account trusting the OIDC'
    required: false
  cache-key:
    description: 'The key to store/retrieve the cache'
    required: false
    default: ''
  secrets:
    description: "List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)"
    required: false

outputs:
  imageid:
    description: 'Image ID'
    value: ${{ steps.build-push.outputs.imageid }}
  digest:
    description: 'Image digest'
    value: ${{ steps.build-push.outputs.digest }}
  metadata:
    description: 'Build result metadata'
    value: ${{ steps.build-push.outputs.metadata }}
  imagetags:
    description: "Generated tag"
    value: ${{ steps.image-tags.outputs.tags }}

runs:
  using: "composite"
  steps:
  - name: Docker cache
    uses: Zilliqa/gh-actions-workflows/actions/docker-cache@devops-1215
    id: docker-cache
    with:
      backend: registry
      key: ${{ inputs.cache-key }}
  - name: Set image tags
    uses: Zilliqa/gh-actions-workflows/actions/generate-tag@v1
    id: image-tags
    with:
      tag: ${{ inputs.tag }}
      length: ${{ inputs.tag-length }}
      latest: ${{ inputs.tag-latest }}
  - name: Configure AWS Credentials
    uses: Zilliqa/gh-actions-workflows/actions/configure-aws-credentials@main
    if: ${{ contains(inputs.registry, '.amazonaws.com') }}
    with:
      aws-region: ${{ inputs.aws-region }}
      role-to-assume: ${{ inputs.role-to-assume }}
      oidc-role: ${{ inputs.oidc-role }}
  - name: Login to AWS registry
    uses: docker/login-action@v2
    if: ${{ contains(inputs.registry, '.amazonaws.com') }}
    with:
      registry: ${{ inputs.registry }}
  - name: Login to Dockerhub
    uses: docker/login-action@v2
    if: ${{ inputs.registry-username != '' && inputs.registry-password != '' }}
    with:
      username: ${{ inputs.registry-username }}
      password: ${{ inputs.registry-password }}
  - name: "Configure GCP Credentials"
    id: google-auth
    uses: "google-github-actions/auth@v1"
    if: ${{ contains(inputs.registry, '.pkg.dev') || contains(inputs.registry, 'gcr.io') }}
    with:
      token_format: "access_token"
      workload_identity_provider: ${{ inputs.workload-identity-provider }}
      service_account: ${{ inputs.service-account }}
      create_credentials_file: true
  - name: Login to GCP registry
    uses: docker/login-action@v2
    if: ${{ contains(inputs.registry, '.pkg.dev') || contains(inputs.registry, 'gcr.io') }}
    with:
      registry: ${{ inputs.registry }}
      username: "oauth2accesstoken"
      password: "${{ steps.google-auth.outputs.access_token }}"
  - name: Build and push Docker images
    uses: Zilliqa/gh-actions-workflows/actions/docker-build-push@main
    id: build-push
    with:
      file: ${{ inputs.file }}
      context: ${{ inputs.context }}
      build-args: ${{ inputs.build-args }}
      pull: ${{ inputs.pull }}
      push: ${{ inputs.push }}
      target: ${{ inputs.target }}
      tags: ${{ steps.image-tags.outputs.tags }}
      cache-from: | 
        ${{ steps.docker-cache.outputs.cachefrom }}
        ${{ steps.docker-cache.outputs.cachefromfallback }}
      cache-to: ${{ steps.docker-cache.outputs.cacheto }}
      secrets: ${{ inputs.secrets }}
