name: 'Terragrunt deploy'
description: 'Deploy infrastructure using terragrunt'
author: devops@zilliqa.com

inputs:
  terraform-version:
    description: 'The Terraform version'
    required: false
    default: "1.2.5"
  terragrunt-version:
    description: 'The Terragrunt version'
    required: false
    default: "0.38.7"
  z-version:
    description: 'The z/tg version'
    required: false
    default: "1.0.0"
  actions:
    description: "What action to take: 'plan-only' or 'plan-and-apply'"
    required: false
    default: 'plan-only'
  working-dir:
    description: 'The Terragrunt working directory'
    required: true
  engine:
    description: "The Terragrunt engine. Valid inputs are 'z/tg' and 'terragrunt'"
    required: false
    default: "z/tg"
  token:
    description: "The GitHub token"
    required: false
    default: ${{ github.token }}

runs:
  using: "composite"
  steps:
  - name: Install Terraform
    uses: hashicorp/setup-terraform@v2
    with:
      terraform_version: ${{ inputs.terraform-version }}
      terraform_wrapper: false
  - name: Install Terragrunt
    uses: eLco/setup-terragrunt@v1
    with:
      terragrunt_version: ${{ inputs.terragrunt-version }}
  - name: Build z/tg
    if: ${{ inputs.engine == 'z/tg' }}
    shell: bash
    run: |
      FILE="z-Linux-x86_64.tar.gz"
      if [ "${{ runner.os }}" = "macOS" ]; then
        FILE="z-Darwin-x86_64.tar.gz"
      fi;
      VERSION="z-v${{ inputs.z-version }}"

      alias errcho='>&2 echo'

      if [ "$VERSION" = "latest" ]; then
        # Github should return the latest release first.
        parser=".[0].assets | map(select(.name == \"$FILE\"))[0].id"
      else
        parser=". | map(select(.tag_name == \"$VERSION\"))[0].assets | map(select(.name == \"$FILE\"))[0].id"
      fi;

      asset_id=`curl -H "Authorization: token ${{ inputs.token }}" -H "Accept: application/vnd.github.v3.raw" -s https://api.github.com/repos/zilliqa/devops/releases | jq "$parser"`

      echo $asset_id
      if [ "$asset_id" = "null" ]; then
        errcho "ERROR: version not found $VERSION"
        exit 1
      fi;
      
      curl -sL -u "zilliqa:${{ inputs.token }}" --header "Accept: application/octet-stream" https://api.github.com/repos/zilliqa/devops/releases/assets/$asset_id > $FILE
      tar -xvf $FILE
      sudo mv ./z /usr/local/bin
      sudo mv ./tg /usr/local/bin
  
  - name: Infrastructure plan
    if: ${{ contains(inputs.actions, 'plan-only') && inputs.engine == 'z/tg' }}
    shell: bash
    env:
      AWS_ACCESS_KEY_ID: ""
      AWS_SECRET_ACCESS_KEY: ""
      AWS_SESSION_TOKEN: ""
    run: |
      cd ${{ inputs.working-dir }}
      HERE=`pwd`
      tg ${HERE} run-all init
      cd _projects && for i in * ; do cd $i && echo y | terragrunt init || cd ..; done
      cd ${HERE}
      tg ${HERE} run-all plan
  - name: Infrastructure deploy
    if: ${{ contains(inputs.actions, 'plan-and-apply') && inputs.engine == 'z/tg' }}
    id: terragrunt-z-first-attempt
    continue-on-error: true
    shell: bash
    env:
      AWS_ACCESS_KEY_ID: ""
      AWS_SECRET_ACCESS_KEY: ""
      AWS_SESSION_TOKEN: ""
    run: |
      cd ${{ inputs.working-dir }}
      HERE=`pwd`
      tg ${HERE} run-all init
      cd _projects && for i in * ; do cd $i && echo y | terragrunt init || cd ..; done
      cd ${HERE}
      echo "Y" | tg ${HERE} run-all apply
  - name: Infrastructure deploy - retry
    if: ${{ contains(inputs.actions, 'plan-and-apply') && steps.terragrunt-z-first-attempt.outcome == 'failure' && inputs.engine == 'z/tg' }}
    shell: bash
    env:
      AWS_ACCESS_KEY_ID: ""
      AWS_SECRET_ACCESS_KEY: ""
      AWS_SESSION_TOKEN: ""
    run: |
      cd ${{ inputs.working-dir }}
      echo "Y" | tg `pwd` run-all apply

  - name: Infrastructure plan
    if: ${{ contains(inputs.actions, 'plan-only') && inputs.engine == 'terragrunt' }}
    shell: bash
    env:
      AWS_ACCESS_KEY_ID: ""
      AWS_SECRET_ACCESS_KEY: ""
      AWS_SESSION_TOKEN: ""
    run: |
      terragrunt run-all plan --terragrunt-working-dir ${{ inputs.working-dir }}
  - name: Infrastructure deploy
    if: ${{ contains(inputs.actions, 'plan-and-apply') && inputs.engine == 'terragrunt' }}
    shell: bash
    env:
      AWS_ACCESS_KEY_ID: ""
      AWS_SECRET_ACCESS_KEY: ""
      AWS_SESSION_TOKEN: ""
    run: echo "Y" | terragrunt run-all apply --terragrunt-working-dir ${{ inputs.working-dir }}